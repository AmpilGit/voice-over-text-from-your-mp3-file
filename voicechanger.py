# import torch
# from TTS.api import TTS

# # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ torch.load (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# old_torch_load = torch.load
# def _new_torch_load(*args, **kwargs):
#     if "weights_only" not in kwargs:
#         kwargs["weights_only"] = False
#     return old_torch_load(*args, **kwargs)

# torch.load = _new_torch_load

# # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
# tts = TTS(
#     model_name="tts_models/multilingual/multi-dataset/xtts_v2",
#     progress_bar=True,
#     gpu=False
# )

# # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
# REFERENCE_WAV = "nekopara.wav"  # WAV-—Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–º –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# TEXT_TO_SYNTHESIZE =  "Podozhdite, Chocola edva li mozhet chitat detskie knigi! Ona ne smozhet prochitat recept!"
# OUTPUT_PATH = "output_cloned_voice.wav"

# print("üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...")
# tts.tts_to_file(
#     text=TEXT_TO_SYNTHESIZE,
#     speaker_wav=REFERENCE_WAV,
#     file_path=OUTPUT_PATH,
#     split_sentences=True
# )

# print(f"‚úÖ –ü–µ—Ä–µ–æ–∑–≤—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {os.path.abspath(OUTPUT_PATH)}")
import torch
from TTS.api import TTS
import warnings
warnings.filterwarnings("ignore")
import noisereduce as nr
import soundfile as sf
# –û–±—Ö–æ–¥ –æ—à–∏–±–∫–∏ —Å weights_only
# from rwkv_cpp import RwkvCpp

# # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
# model_path = "rwkv-4-ru-petro-79M-q8_0.gguf"

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
# model = RwkvCpp(model_path=model_path)

# def generate_insult():
#     prompt = "–°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å—Ç–∏—Ä–æ–Ω–∏—á–Ω–æ–µ –ø—Ä–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–ª—É–ø—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"
#     output = model.generate(
#         prompt=prompt,
#         max_tokens=50,
#         temperature=0.8,
#         top_k=50,
#         top_p=0.95,
#         repetition_penalty=1.1
#     )
#     return output.strip()
old_torch_load = torch.load
def _new_torch_load(*args, **kwargs):
    if "weights_only" not in kwargs:
        kwargs["weights_only"] = False
    return old_torch_load(*args, **kwargs)
torch.load = _new_torch_load

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", progress_bar=True, gpu=False,
          vocoder_path="vocoder_models/universal/libri_tts/univnet")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
tts.tts_to_file(
    text=" –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞!!!! –≠—Ç–æ –º–∏—Å—Ç–µ—Ä–∏'—Ä–∏–Ω–æ –°–≤–µ—Ç–ª—É'–Ω–∏–Ω–æ'. –•–æ—á—É –Ω–∞—É—á–∏—Ç—Å—è —Ç—ã–∫–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ –≥—É–≥–ª–µ, –ø–æ–º–æ–≥–∏ –ø–æ–±—Ä–∞'—Ç—Å–∫–∏",
    file_path="output.wav", 
    speaker_wav="svetlana_wav.wav",
    speed=1.2,
    language="ru",
    temperature=1.3,
    repetition_penalty=5.0,
    length_penalty=0.0,
)
data, sr = sf.read("output.wav")

# –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞
reduced_noise = nr.reduce_noise(y=data, sr=sr)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
sf.write("output_clean.wav", reduced_noise, sr)

print("‚úÖ –ì–æ—Ç–æ–≤–æ!")